// Mocks generated by Mockito 5.4.3 from annotations
// in throwtrash/test/widget/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:throwtrash/models/account_link_info.dart' as _i2;
import 'package:throwtrash/models/trash_data.dart' as _i4;
import 'package:throwtrash/usecase/account_link_service_interface.dart' as _i10;
import 'package:throwtrash/usecase/sync_result.dart' as _i7;
import 'package:throwtrash/usecase/trash_data_service_interface.dart' as _i3;
import 'package:throwtrash/viewModels/account_link_model.dart' as _i11;
import 'package:throwtrash/viewModels/change_theme_model.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccountLinkInfo_0 extends _i1.SmartFake
    implements _i2.AccountLinkInfo {
  _FakeAccountLinkInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TrashDataServiceInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrashDataServiceInterface extends _i1.Mock
    implements _i3.TrashDataServiceInterface {
  @override
  List<_i4.TrashData> get allTrashList => (super.noSuchMethod(
        Invocation.getter(#allTrashList),
        returnValue: <_i4.TrashData>[],
        returnValueForMissingStub: <_i4.TrashData>[],
      ) as List<_i4.TrashData>);

  @override
  _i5.Future<bool> refreshTrashData() => (super.noSuchMethod(
        Invocation.method(
          #refreshTrashData,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  String getTrashName({
    String? type = r'',
    String? trashVal = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrashName,
          [],
          {
            #type: type,
            #trashVal: trashVal,
          },
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getTrashName,
            [],
            {
              #type: type,
              #trashVal: trashVal,
            },
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getTrashName,
            [],
            {
              #type: type,
              #trashVal: trashVal,
            },
          ),
        ),
      ) as String);

  @override
  int getScheduleCount() => (super.noSuchMethod(
        Invocation.method(
          #getScheduleCount,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i5.Future<bool> addTrashData(_i4.TrashData? trashData) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTrashData,
          [trashData],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteTrashData(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTrashData,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i4.TrashData? getTrashDataById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTrashDataById,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i4.TrashData?);

  @override
  _i5.Future<bool> updateTrashData(_i4.TrashData? trashData) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTrashData,
          [trashData],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i7.SyncResult> syncTrashData() => (super.noSuchMethod(
        Invocation.method(
          #syncTrashData,
          [],
        ),
        returnValue: _i5.Future<_i7.SyncResult>.value(_i7.SyncResult.skipped),
        returnValueForMissingStub:
            _i5.Future<_i7.SyncResult>.value(_i7.SyncResult.skipped),
      ) as _i5.Future<_i7.SyncResult>);

  @override
  List<List<_i4.TrashData>> getEnableTrashList({
    required int? year,
    required int? month,
    required List<int>? targetDateList,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEnableTrashList,
          [],
          {
            #year: year,
            #month: month,
            #targetDateList: targetDateList,
          },
        ),
        returnValue: <List<_i4.TrashData>>[],
        returnValueForMissingStub: <List<_i4.TrashData>>[],
      ) as List<List<_i4.TrashData>>);

  @override
  List<_i4.TrashData> getTrashOfToday({
    required int? year,
    required int? month,
    required int? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrashOfToday,
          [],
          {
            #year: year,
            #month: month,
            #date: date,
          },
        ),
        returnValue: <_i4.TrashData>[],
        returnValueForMissingStub: <_i4.TrashData>[],
      ) as List<_i4.TrashData>);
}

/// A class which mocks [ChangeThemeModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeThemeModel extends _i1.Mock implements _i8.ChangeThemeModel {
  @override
  bool get darkMode => (super.noSuchMethod(
        Invocation.getter(#darkMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> switchDarkMode() => (super.noSuchMethod(
        Invocation.method(
          #switchDarkMode,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AccountLinkServiceInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountLinkServiceInterface extends _i1.Mock
    implements _i10.AccountLinkServiceInterface {
  @override
  _i5.Future<_i2.AccountLinkInfo> startLink(
          _i11.AccountLinkType? accountLinkType) =>
      (super.noSuchMethod(
        Invocation.method(
          #startLink,
          [accountLinkType],
        ),
        returnValue:
            _i5.Future<_i2.AccountLinkInfo>.value(_FakeAccountLinkInfo_0(
          this,
          Invocation.method(
            #startLink,
            [accountLinkType],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.AccountLinkInfo>.value(_FakeAccountLinkInfo_0(
          this,
          Invocation.method(
            #startLink,
            [accountLinkType],
          ),
        )),
      ) as _i5.Future<_i2.AccountLinkInfo>);

  @override
  _i5.Future<_i2.AccountLinkInfo?> getAccountLinkInfoWithCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccountLinkInfoWithCode,
          [code],
        ),
        returnValue: _i5.Future<_i2.AccountLinkInfo?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.AccountLinkInfo?>.value(),
      ) as _i5.Future<_i2.AccountLinkInfo?>);
}
