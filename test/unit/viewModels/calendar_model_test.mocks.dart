// Mocks generated by Mockito 5.3.2 from annotations
// in throwtrash/test/unit/viewModels/calendar_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:throwtrash/models/trash_data.dart' as _i4;
import 'package:throwtrash/usecase/calendar_service.dart' as _i2;
import 'package:throwtrash/usecase/trash_data_service_interface.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CalendarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarService extends _i1.Mock implements _i2.CalendarService {
  MockCalendarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<int> generateMonthCalendar(
    int? year,
    int? month,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateMonthCalendar,
          [
            year,
            month,
          ],
        ),
        returnValue: <int>[],
      ) as List<int>);
}

/// A class which mocks [TrashDataServiceInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrashDataServiceInterface extends _i1.Mock
    implements _i3.TrashDataServiceInterface {
  MockTrashDataServiceInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.TrashData> get allTrashList => (super.noSuchMethod(
        Invocation.getter(#allTrashList),
        returnValue: <_i4.TrashData>[],
      ) as List<_i4.TrashData>);
  @override
  _i5.Future<bool> refreshTrashData() => (super.noSuchMethod(
        Invocation.method(
          #refreshTrashData,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  String getTrashName({
    String? type = r'',
    String? trashVal = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrashName,
          [],
          {
            #type: type,
            #trashVal: trashVal,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  int getScheduleCount() => (super.noSuchMethod(
        Invocation.method(
          #getScheduleCount,
          [],
        ),
        returnValue: 0,
      ) as int);
  @override
  _i5.Future<bool> addTrashData(_i4.TrashData? trashData) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTrashData,
          [trashData],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> deleteTrashData(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTrashData,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i4.TrashData? getTrashDataById(String? id) =>
      (super.noSuchMethod(Invocation.method(
        #getTrashDataById,
        [id],
      )) as _i4.TrashData?);
  @override
  _i5.Future<bool> updateTrashData(_i4.TrashData? trashData) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTrashData,
          [trashData],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<void> syncTrashData() => (super.noSuchMethod(
        Invocation.method(
          #syncTrashData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  List<List<_i4.TrashData>> getEnableTrashList({
    required int? year,
    required int? month,
    required List<int>? targetDateList,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEnableTrashList,
          [],
          {
            #year: year,
            #month: month,
            #targetDateList: targetDateList,
          },
        ),
        returnValue: <List<_i4.TrashData>>[],
      ) as List<List<_i4.TrashData>>);
  @override
  List<_i4.TrashData> getTrashOfToday({
    required int? year,
    required int? month,
    required int? date,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrashOfToday,
          [],
          {
            #year: year,
            #month: month,
            #date: date,
          },
        ),
        returnValue: <_i4.TrashData>[],
      ) as List<_i4.TrashData>);
}
